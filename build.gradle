plugins {
    id "org.sonarqube" version "2.2"
    id "org.xbib.gradle.plugin.asciidoctor" version "1.5.4.1.0"
}

printf "Host: %s\nOS: %s %s %s\nJVM: %s %s %s %s\nGroovy: %s\nGradle: %s\n" +
        "Build: group: ${project.group} name: ${project.name} version: ${project.version}\n",
        InetAddress.getLocalHost(),
        System.getProperty("os.name"),
        System.getProperty("os.arch"),
        System.getProperty("os.version"),
        System.getProperty("java.version"),
        System.getProperty("java.vm.version"),
        System.getProperty("java.vm.vendor"),
        System.getProperty("java.vm.name"),
        GroovySystem.getVersion(),
        gradle.gradleVersion

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: "jacoco"
apply plugin: 'org.xbib.gradle.plugin.asciidoctor'

configurations {
    wagon
}

dependencies {
    testCompile 'junit:junit:4.12'
    testCompile 'xalan:xalan:2.7.2'
    testCompile 'org.xmlunit:xmlunit-matchers:2.3.0'
    testCompile 'com.github.stefanbirkner:system-rules:1.16.0'
    testCompile "org.xbib:bibliographic-character-sets:1.0.0"
    wagon 'org.apache.maven.wagon:wagon-ssh-external:2.10'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all" << "-profile" << "compact2"
}
test {
    // massive heap for for xmlunit DOM comparer
    jvmArgs '-Xmx2048m'
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
    }
    reports.html.destination = file("${projectDir}/docs/test")
}

javadoc {
    options.destinationDirectory(file("${projectDir}/docs/javadoc"))
    configure(options) {
        noTimestamp = true
    }
}

asciidoctor {
    backends 'html5'
    outputDir = file("${projectDir}/docs")
    separateOutputDirs = false
    attributes 'source-highlighter': 'coderay',
            toc                 : '',
            idprefix            : '',
            idseparator         : '-',
            stylesheet: "${projectDir}/src/docs/asciidoc/css/foundation.css"
}

javadoc {
    options.destinationDirectory(file("${projectDir}/docs/javadoc"))
    configure(options) {
        noTimestamp = true
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
}
artifacts {
    archives sourcesJar, javadocJar
}
if (project.hasProperty('signing.keyId')) {
    signing {
        sign configurations.archives
    }
}

apply from: 'gradle/ext.gradle'
apply from: 'gradle/publish.gradle'
apply from: 'gradle/sonarqube.gradle'
